#!/usr/bin/env bash

set -e

function print_version() {
    echo "Smraza PiTFT setup v1.0"
    echo "About the author:"
    echo "I'm technical director of Smraza, my personal email:singing99@live.com"
    echo "Created 15 Dec. 2016"
    echo "by Keen"
    exit 1
}

function print_help() {
    echo "Usage: $0 -t [pitfttype]"
    echo "    -h            Print this help"
    echo "    -v            Print version information"
    echo "    -u [homedir]  Specify path of primary user's home directory (defaults to /root)"
    echo "    -t [type]     Specify the type of PiTFT: 'sma35'"
    echo "    -s [rotation] Support only rotation: 0/90/180/270"
    echo "    -i            Switch to HDMI"
    echo "You must specify a type of display."
    exit 1
}

group=SMRAZA
function info() {
    system="$1"
    group="${system}"
    shift
    FG="1;32m"
    BG="40m"
    echo -e "[\033[${FG}\033[${BG}${system}\033[0m] $*"
}

function bail() {
    FG="1;31m"
    BG="40m"
    echo -en "[\033[${FG}\033[${BG}${group}\033[0m] "
    if [ -z "$1" ]; then
        echo "Exiting due to error"
    else
        echo "Exiting due to error: $*"
    fi
    exit 1
}

function ask() {
    # http://djm.me/ask
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

# update /boot/config.txt with appropriate values
function update_configtxt() {

    if grep -q "smraza-pitft-setup" "/boot/config.txt"; then
        echo "Already have a smraza-pitft-setup section in /boot/config.txt."
        echo "Adding new section, but please run:"
        echo "sudo nano /boot/config.txt"
        echo "...and remove any duplicate sections."
	exit 1
    fi

    if [ "${pitfttype}" == "sma35" ]; then
	overlay="dtoverlay=waveshare35a,rotate=90,speed=35000000,fps=60"
    fi

    date=`date`
    cat >> /boot/config.txt <<EOF
# --- added by smraza-pitft-setup $date ---
[pi1]
device_tree=bcm2708-rpi-b-plus.dtb
[pi2]
device_tree=bcm2709-rpi-2-b.dtb
[pi3]
device_tree=bcm2710-rpi-3-b.dtb
[all]
dtparam=spi=on
dtparam=i2c1=on
dtparam=i2c_arm=on
$overlay
# --- end smraza-pitft-setup $date ---
EOF
}

function pi_rotation(){

if [ "${rotation}" !=  "0" ] && [ "${rotation}" !=  "90" ] && [ "${rotation}" !=  "180" ] && [ "${rotation}" !=  "270" ]; then
	bail "Support only rotation: 0/90/180/270"
exit 1
fi
sed -i '/dtoverlay=waveshare35a,rotate/'d /boot/config.txt
sed -i '/end smraza-pitft-setup/'d /boot/config.txt
date=`date`
cat >> /boot/config.txt <<EOF
dtoverlay=waveshare35a,rotate=$rotation,speed=35000000,fps=60
# --- end smraza-pitft-setup $date ---
EOF
info PITFT "Rotation success!"
info PITFT "Calibration screen..."
calibration
echo
read -p "Reboot to apply changes? (y/n): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
  reboot
fi
exit 1
}

function calibration() {
rm -f /etc/X11/xorg.conf.d/99-calibration.conf
if [ "${rotation}" == "0" ]; then
        calib="263 3834 239 3921"
	dn=0
fi
if [ "${rotation}" == "90" ]; then
        calib="3894 223 254 3808"
	dn=1
fi
if [ "${rotation}" == "180" ]; then
        calib="3855 253 3926 238"
	dn=0
fi
if [ "${rotation}" == "270" ]; then
        calib="242 3918 3848 244"
	dn=1
fi
info PITFT "Calibration success!"

date=`date`
cat > /etc/X11/xorg.conf.d/99-calibration.conf <<EOF
# --- added by smraza-pitft-setup $date ---
Section "InputClass"
	Identifier	"calibration"
	MatchProduct	"ADS7846 Touchscreen"
	Option	"Calibration"	"$calib"
	Option	"SwapAxes"	"$dn"
EndSection
# --- end smraza-pitft-setup $date ---
EOF
}

function device_tree(){
cp waveshare35a-overlay.dtb /boot/overlays/
}

function switch_hdmi(){
    info HDMI "Switch to HDMI..."
    rm -f /etc/X11/xorg.conf.d/99-fbdev.conf
    rm -f /etc/X11/xorg.conf.d/99-calibration.conf
    rm -f /etc/pointercal
    rm -f /dev/input/touchscreen
    rm -f /etc/udev/rules.d/95-*.rules
    rm -f ${target_homedir}/99-fbturbo.conf
    rm -f ${target_homedir}/99-fbdev.conf
    rm -f ~/99-fbdev.conf
    rm -f /etc/modprobe.d/re4son.conf
    sed -i 's/rootwait fbcon=map:10 fbcon=font:VGA8x8/rootwait/g' "/boot/cmdline.txt"
    sed -i 's/BLANK_TIME=0/BLANK_TIME=10/g' "/etc/kbd/config"
    sed -i '/added by smraza-pitft-setup/,/end smraza-pitft-setup/d' "/boot/config.txt"
    sed -i '/added by smraza-pi-tft-setup/,/end smraza-pitft-setup/d' "/etc/modules"
    sed -i '/added by smraza-pi-tft-setup/,/end smraza-pitft-setup/d' "${target_homedir}/.profile"
    info HDMI "Switch success!"
    echo
    read -p "Reboot to apply changes? (y/n): " -n 1 -r
    echo

    if [[ $REPLY =~ ^[Yy]$ ]]; then
       reboot
    fi
    exit 1
}

# currently for '90' rotation only
function update_xorg() {
    mkdir -p /etc/X11/xorg.conf.d

    cat > /etc/X11/xorg.conf.d/99-fbdev.conf <<EOF
Section "Device"
  Identifier "myfb"
  Driver "fbdev"
  Option "fbdev" "/dev/fb1"
EndSection
EOF

if [ "${pitfttype}" == "sma35" ]; then
        cat > /etc/X11/xorg.conf.d/99-calibration.conf <<EOF
Section "InputClass"
	Identifier	"calibration"
	MatchProduct	"ADS7846 Touchscreen"
	Option	"Calibration"	"3894 223 254 3808"
	Option	"SwapAxes"	"1"
EndSection
EOF
    fi
}

function update_x11profile() {
    fbturbo_path="/usr/share/X11/xorg.conf.d/99-fbturbo.conf"
    if [ -e $fbturbo_path ]; then
        echo "Moving ${fbturbo_path} to ${target_homedir}"
        mv "$fbturbo_path" "$target_homedir"
    fi

    if grep -xq "export FRAMEBUFFER=/dev/fb1" "${target_homedir}/.profile"; then
        echo "Already had 'export FRAMEBUFFER=/dev/fb1'"
    else
        echo "Adding 'export FRAMEBUFFER=/dev/fb1'"
        cat >> "${target_homedir}/.profile" <<EOF
export FRAMEBUFFER=/dev/fb1
EOF
    fi
}

# currently for '90' rotation only
function update_pointercal() {
    if [ "${pitfttype}" == "sma35" ]; then
        cat > /etc/pointercal <<EOF
8 -8432 32432138 5699 -112 -965922 65536
EOF
    fi
}

function update_udev() {
    if [ "${pitfttype}" == "sma35" ]; then
        cat > /etc/udev/rules.d/95-stmpe.rules <<EOF
        SUBSYSTEM=="input", ATTRS{name}=="stmpe-ts", ENV{DEVNAME}=="*event*", SYMLINK+="input/touchscreen"
EOF
    fi
}

function install_console() {
    if ! grep -q 'fbcon=map:10 fbcon=font:VGA8x8' /boot/cmdline.txt; then
        echo "Updating /boot/cmdline.txt"
        sed -i 's/rootwait/rootwait fbcon=map:10 fbcon=font:VGA8x8/g' "/boot/cmdline.txt"
    else
        echo "/boot/cmdline.txt already updated"
    fi
    if [ ! -f /etc/kbd/config ]; then
        echo "Creating /etc/kbd/config"
        mkdir -p /etc/kbd
        touch /etc/kbd/config
    fi
    sed -i 's/BLANK_TIME=.*/BLANK_TIME=0/g' "/etc/kbd/config"
    cat > /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  printf "My IP address is %s\n" "$_IP"
fi

# disable console blanking on PiTFT
sudo sh -c "TERM=linux setterm -blank 0 >/dev/tty0"

exit 0
EOF
}

function uninstall_console() {
    sed -i 's/rootwait fbcon=map:10 fbcon=font:VGA8x8/rootwait/g' "/boot/cmdline.txt"
    sed -i 's/BLANK_TIME=0/BLANK_TIME=10/g' "/etc/kbd/config"
    echo "Screen blanking time reset to 10 minutes"
    cat > /etc/rc.local <<EOF
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  printf "My IP address is %s\n" "$_IP"
fi

exit 0
EOF
}

function update_etcmodules() {
    if [ "${pitfttype}" == "sma35" ]; then
        ts_module="stmpe_ts"
    else
        return 0
    fi

    if grep -xq "$ts_module" "/etc/modules"; then
        echo "Already had $ts_module"
    else
        echo "Adding $ts_module"
        echo "$ts_module" >> /etc/modules
    fi
}

function update_bootprefs() {
    echo "Turning off boot-to-desktop"
    if [ -e /etc/init.d/lightdm ]; then
      if [ $SYSTEMD -eq 1 ]; then
        systemctl set-default multi-user.target
        ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
      else
        update-rc.d lightdm disable 2
        sed /etc/inittab -i -e "s/1:2345:respawn:\/bin\/login -f pi tty1 <\/dev\/tty1 >\/dev\/tty1 2>&1/1:2345:respawn:\/sbin\/getty --noclear 38400 tty1/"
      fi
    fi
}

# MAIN

target_homedir="/root"

args=$(getopt -uo 'hvris:t:o:b:u:' -- $*)
[ $? != 0 ] && print_help
set -- $args

for i
do
    case "$i"
    in
        -h)
            print_help
            ;;
        -v)
            print_version
            ;;
	-i)
	    switch_hdmi
	    ;;
        -u)
            target_homedir="$2"
            echo "Homedir = ${2}"
            shift
            shift
            ;;
        -s)
            rotation="$2"
            echo "Rotation = ${2}"
            pi_rotation
            ;;
        -t)
            pitfttype="$2"
            echo "Type = ${2}"
            shift
            shift
            ;;
    esac
done

if [[ $EUID -ne 0 ]]; then
    bail "smraza-pitft-setup must be run as root. try: sudo smraza-pitft-setup"
fi

# check init system (technique borrowed from raspi-config):
info PITFT 'Checking init system...'

if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
  echo "Found systemd"
  SYSTEMD=1
elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
  echo "Found sysvinit"
  SYSTEMD=0
else
  bail "Unrecognised init system"
fi

if grep -q boot /proc/mounts; then
    echo "/boot is mounted"
else
    echo "/boot must be mounted. if you think it's not, quit here and try: sudo mount /dev/mmcblk0p1 /boot"
    if ask "Continue?"; then
        echo "Proceeding."
    else
        bail "Aborting."
    fi
fi

if [[ ! -e "$target_homedir" || ! -d "$target_homedir" ]]; then
    bail "$target_homedir must be an existing directory (use -u /home/foo to specify)"
fi

if [ "${pitfttype}" != "sma35" ]; then
    echo "Type must be one of:"
    echo "  'sma35' (smraza 3.5\")"
    echo
    print_help
fi
info PITFT "Installing device tree..."
device_tree || bail "Unable to install /boot/overlays/waveshare35a-overlay.dtb"

info PITFT "Updating X11 default calibration..."
update_xorg || bail "Unable to update /etc/X11/xorg.conf.d/99-calibration.conf"

info PITFT "Updating X11 setup tweaks..."
update_x11profile || bail "Unable to update X11 setup"

info PITFT "Updating TSLib default calibration..."
update_pointercal || bail "Unable to update /etc/pointercal"

info PITFT "Updating SysFS rules for Touchscreen..."
update_udev || bail "Unable to update /etc/udev/rules.d"

# ask for console access
if ask "Would you like the console to appear on the PiTFT display?"; then
    info PITFT "Updating console to PiTFT..."
    install_console || bail "Unable to configure console"
else
    info PITFT "Making sure console doesn't use PiTFT"
    uninstall_console || bail "Unable to configure console"
fi

info PITFT "Updating /etc/modules..."
update_etcmodules || bail "Unable to update /etc/modules"

# update_bootprefs || bail "Unable to set boot preferences"
info PITFT "Updating /boot/config.txt..."
update_configtxt || bail "Unable to update /boot/config.txt"

info PITFT "Success!"
info PITFT "Notes:"
echo "Please don't run rpi-update, or you'll have to re-install a kernel"
echo "If you have any technical questions, please feel free to contact our support staff via email at support@smraza.com"
echo "Modified 17 Dec. 2016"
echo "by Keen"
echo
read -p "Reboot to apply changes? (y/n): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
  reboot
fi
